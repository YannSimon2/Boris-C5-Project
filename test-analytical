import numpy as np

import matplotlib.pyplot as plt

def bubble_trajectory_analytical(r0, z0, vr0, vz0, n0, E0, B0, t_max, dt):
    """
    Compute electron trajectory in bubble regime using analytical formulas
    
    Parameters:
    r0, z0: initial radial and longitudinal positions (m)
    vr0, vz0: initial radial and longitudinal velocities (m/s)
    n0: plasma density (m^-3)
    E0: electric field amplitude (V/m)
    B0: magnetic field amplitude (T)
    t_max: simulation time (s)
    dt: time step (s)
    """
    
    # Physical constants
    e = 1.602e-19  # electron charge (C)
    m_e = 9.109e-31  # electron mass (kg)
    c = 2.998e8  # speed of light (m/s)
    
    # Plasma frequency
    omega_p = np.sqrt(n0 * e**2 / (m_e * 8.854e-12))
    
    # Time array
    t = np.arange(0, t_max, dt)
    N = len(t)
    
    # Initialize arrays
    r = np.zeros(N)
    z = np.zeros(N)
    vr = np.zeros(N)
    vz = np.zeros(N)
    
    # Initial conditions
    r[0] = r0
    z[0] = z0
    vr[0] = vr0
    vz[0] = vz0
    
    # Bubble parameters (simplified model)
    k_p = omega_p / c  # plasma wave number
    R_b = 2 / k_p  # bubble radius
    
    for i in range(1, N):
        # Current position
        r_curr = r[i-1]
        z_curr = z[i-1]
        
        # Normalized coordinates
        xi = z_curr - c * t[i-1]  # co-moving coordinate
        
        # Electric field components (simplified bubble model)
        if r_curr < R_b and abs(xi) < R_b:
            # Inside bubble
            Er = E0 * r_curr / R_b
            Ez = E0 * np.sin(k_p * xi)
        else:
            # Outside bubble
            Er = 0
            Ez = 0
        
        # Magnetic field (azimuthal)
        if r_curr < R_b:
            B_theta = B0 * r_curr / R_b
        else:
            B_theta = 0
        
        # Lorentz force components
        gamma = 1 / np.sqrt(1 - (vr[i-1]**2 + vz[i-1]**2) / c**2)
        
        Fr = -e * (Er + vz[i-1] * B_theta)
        Fz = -e * (Ez - vr[i-1] * B_theta)
        
        # Update velocities (relativistic)
        dvr_dt = Fr / (gamma * m_e)
        dvz_dt = Fz / (gamma * m_e)
        
        vr[i] = vr[i-1] + dvr_dt * dt
        vz[i] = vz[i-1] + dvz_dt * dt
        
        # Update positions
        r[i] = r[i-1] + vr[i] * dt
        z[i] = z[i-1] + vz[i] * dt
        
        # Keep electron within reasonable bounds
        if r[i] < 0:
            r[i] = abs(r[i])
            vr[i] = -vr[i]
    
    return t, r, z, vr, vz

# Example simulation parameters
r0 = 1e-6  # initial radial position (m)
z0 = 0     # initial longitudinal position (m)
vr0 = 1e6  # initial radial velocity (m/s)
vz0 = 1e8  # initial longitudinal velocity (m/s)

# Plasma parameters
n0 = 1e24  # plasma density (m^-3)
E0 = 1e11  # electric field amplitude (V/m)
B0 = 100   # magnetic field amplitude (T)

# Simulation parameters
t_max = 1e-12  # simulation time (s)
dt = 1e-15     # time step (s)

# Run simulation
t, r, z, vr, vz = bubble_trajectory_analytical(r0, z0, vr0, vz0, n0, E0, B0, t_max, dt)

# Plotting
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))

# Trajectory in r-z plane
ax1.plot(z * 1e6, r * 1e6)
ax1.set_xlabel('z (μm)')
ax1.set_ylabel('r (μm)')
ax1.set_title('Electron Trajectory in Bubble')
ax1.grid(True)

# Radial position vs time
ax2.plot(t * 1e12, r * 1e6)
ax2.set_xlabel('Time (ps)')
ax2.set_ylabel('Radial Position (μm)')
ax2.set_title('Radial Position vs Time')
ax2.grid(True)

# Velocities vs time
ax3.plot(t * 1e12, vr / 1e6, label='vr')
ax3.plot(t * 1e12, vz / 1e6, label='vz')
ax3.set_xlabel('Time (ps)')
ax3.set_ylabel('Velocity (×10⁶ m/s)')
ax3.set_title('Velocities vs Time')
ax3.legend()
ax3.grid(True)

# Energy vs time
c = 2.998e8
gamma = 1 / np.sqrt(1 - (vr**2 + vz**2) / c**2)
energy = (gamma - 1) * 9.109e-31 * c**2 / 1.602e-19  # in eV
ax4.plot(t * 1e12, energy)
ax4.set_xlabel('Time (ps)')
ax4.set_ylabel('Kinetic Energy (eV)')
ax4.set_title('Electron Energy vs Time')
ax4.grid(True)

plt.tight_layout()
plt.show()

print(f"Maximum radial excursion: {np.max(r) * 1e6:.2f} μm")
print(f"Final longitudinal position: {z[-1] * 1e6:.2f} μm")
print(f"Final energy: {energy[-1]:.2e} eV")